package res.ui;
import res.io.*;
import java.io.Serializable;
import java.io.IOException;
import java.util.Random;

public class Main extends javax.swing.JFrame {
    private SocketIOThread iothread;
    private final MessageListener msglistener;
    private String[] username;
    
    private void appendToChatTextArea(String msg) {
        ChatTextArea.setText(ChatTextArea.getText() + "\n" + (String) msg);
    }
    
    private void sendMessage() {
        MessageTextField.setEditable(false);
        String msg = MessageTextField.getText();
        if (msg.startsWith("/")) {
            if (msg.equals("/clear"))
                ChatTextArea.setText("");
            else if (msg.startsWith("name ", 1)) {
                username[0] = msg.split(" ")[1];
                appendToChatTextArea("-- username set to " + username[0] + " --");
            }
            else appendToChatTextArea("-- invalid command --");
        }
        else appendToChatTextArea(username[0] + ": " + msg);
        try { iothread.write(msg); }
        catch (Exception e) {}
        MessageTextField.setText("");
        MessageTextField.setEditable(true);
    }
    
    private void connect() {
        IPTextField.setEditable(false);
        PortTextField.setEditable(false);
        try {
            if (IOComboBox.getModel().getSelectedItem().equals("Server")) {
                iothread = new SocketIOThread(new SocketIOServer(Integer.parseInt(PortTextField.getText())), msglistener);
                StatusLabel.setText("Status: Server created on localhost:" + iothread.getPort());
            }
            else if (IOComboBox.getModel().getSelectedItem().equals("Client")) {
                iothread = new SocketIOThread(new SocketIOClient(IPTextField.getText(), Integer.parseInt(PortTextField.getText())), msglistener);
                StatusLabel.setText("Status: Client connected over " + IPTextField.getText() + ":" + iothread.getPort());
            }
            iothread.start();
            if (IOComboBox.getModel().getSelectedItem().equals("Client"))
                iothread.write("/client_handshake " + username[0]);
        }
        catch (IOException e) {
            appendToChatTextArea(e.toString());
        }
        IPTextField.setEditable(true);
        PortTextField.setEditable(true);
    }
    
    public Main() {
        initComponents();
        username = new String[2];
        Random r = new Random();
        username[0] = "user" + r.nextInt(100);
        username[1] = "user" + r.nextInt(100);
        r = null;
        appendToChatTextArea("-- username set to " + username[0] + " --");
        appendToChatTextArea("-- remote PC username set to " + username[1] + " --");
        msglistener = new MessageListener() {
            @Override
            public void callback(Serializable msg) {
                String msgString = (String) msg;
                if (msgString.startsWith("/")) {
                    if (msgString.startsWith("name ", 1)) {
                        username[1] = msgString.split(" ")[1];
                        appendToChatTextArea("-- remote PC username set to " + username[1] + " --");
                    }
                    else if (msgString.startsWith("client_handshake ", 1)) {
                        username[1] = msgString.split(" ")[1];
                        iothread.write("/server_handshake " + username[0]);
                        StatusLabel.setText("Status: Server connected over localhost:" + iothread.getPort());
                        appendToChatTextArea("-- remote PC username set to " + username[1] + " --");

                    }
                    else if (msgString.startsWith("server_handshake ", 1)) {
                        username[1] = msgString.split(" ")[1];
                        appendToChatTextArea("-- remote PC username set to " + username[1] + " --");
                    }
                }
                else appendToChatTextArea(username[1] + ": " + msgString);
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SendButton = new javax.swing.JButton();
        MessageTextField = new javax.swing.JTextField();
        IOComboBox = new javax.swing.JComboBox<>();
        IPTextField = new javax.swing.JTextField();
        PortTextField = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ChatTextArea = new javax.swing.JTextArea();
        StatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SendButton.setText("â†µ");
        SendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SendButtonMouseClicked(evt);
            }
        });
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        MessageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageTextFieldActionPerformed(evt);
            }
        });
        MessageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MessageTextFieldKeyTyped(evt);
            }
        });

        IOComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Server", "Client" }));
        IOComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IOComboBoxActionPerformed(evt);
            }
        });

        IPTextField.setText("localhost");
        IPTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPTextFieldActionPerformed(evt);
            }
        });

        PortTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PortTextFieldKeyPressed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConnectButtonMouseClicked(evt);
            }
        });
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        ChatTextArea.setEditable(false);
        ChatTextArea.setColumns(20);
        ChatTextArea.setRows(5);
        jScrollPane1.setViewportView(ChatTextArea);

        StatusLabel.setText("Status: Disconnected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MessageTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SendButton))
            .addGroup(layout.createSequentialGroup()
                .addComponent(IOComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ConnectButton))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(StatusLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IOComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addComponent(StatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MessageTextField)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SendButtonActionPerformed

    private void IOComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IOComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IOComboBoxActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void ConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConnectButtonMouseClicked
        connect();
    }//GEN-LAST:event_ConnectButtonMouseClicked

    private void SendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SendButtonMouseClicked
        sendMessage();
    }//GEN-LAST:event_SendButtonMouseClicked

    private void IPTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IPTextFieldActionPerformed

    private void MessageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MessageTextFieldActionPerformed

    private void MessageTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MessageTextFieldKeyTyped
        if (evt.getKeyChar() == 10)
            sendMessage();
    }//GEN-LAST:event_MessageTextFieldKeyTyped

    private void PortTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PortTextFieldKeyPressed
        if (evt.getKeyChar() == 10)
            connect();
    }//GEN-LAST:event_PortTextFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ChatTextArea;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JComboBox<String> IOComboBox;
    private javax.swing.JTextField IPTextField;
    private javax.swing.JTextField MessageTextField;
    private javax.swing.JTextField PortTextField;
    private javax.swing.JButton SendButton;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
